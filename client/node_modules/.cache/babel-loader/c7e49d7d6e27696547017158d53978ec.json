{"ast":null,"code":"var _jsxFileName = \"/Users/sejaldua/Desktop/Fall2020/misc/sejal-einblick-stock-challenge/client/src/Chart.js\";\nimport React, { Component } from \"react\";\nimport \"./LineChart.css\";\n\nclass LineChart extends Component {\n  // GET MAX & MIN X\n  getMinX() {\n    const {\n      data\n    } = this.props;\n    return data[0].time;\n  }\n\n  getMaxX() {\n    const {\n      data\n    } = this.props;\n    return data[data.length - 1].time;\n  } // GET MAX & MIN Y\n\n\n  getMinY() {\n    const {\n      data\n    } = this.props;\n    return data.reduce((min, p) => p.price < min ? p.price : min, data[0].price);\n  }\n\n  getMaxY() {\n    const {\n      data\n    } = this.props;\n    return data.reduce((max, p) => p.price > max ? p.price : max, data[0].price);\n  } // GET SVG COORDINATES\n\n\n  getSvgX(x) {\n    const {\n      svgWidth\n    } = this.props;\n    return x / this.getMaxX() * svgWidth;\n  }\n\n  getSvgY(y) {\n    const {\n      svgHeight\n    } = this.props;\n    return svgHeight - y / this.getMaxY() * svgHeight;\n  } // BUILD SVG PATH\n\n\n  makePath() {\n    const {\n      data\n    } = this.props;\n    const color = \"#FFFFFF\";\n    let pathD = \"M \" + this.getSvgX(data[0].time) + \" \" + this.getSvgY(data[0].price) + \" \";\n    pathD += data.map((point, i) => {\n      return \"L \" + this.getSvgX(point.time) + \" \" + this.getSvgY(point.price) + \" \";\n    });\n    return /*#__PURE__*/React.createElement(\"path\", {\n      className: \"linechart_path\",\n      d: pathD,\n      style: {\n        stroke: color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    });\n  } // // BUILD GRID AXIS\n  // makeAxis() {\n  // const minX = this.getMinX(), maxX = this.getMaxX();\n  // const minY = this.getMinY(), maxY = this.getMaxY();\n  // return (\n  //   <g className=\"linechart_axis\">\n  //     <line\n  //       x1={this.getSvgX(minX)} y1={this.getSvgY(minY)}\n  //       x2={this.getSvgX(maxX)} y2={this.getSvgY(minY)} />\n  //     <line\n  //       x1={this.getSvgX(minX)} y1={this.getSvgY(minY)}\n  //       x2={this.getSvgX(minX)} y2={this.getSvgY(maxY)} />\n  //   </g>\n  //   );\n  // }\n  // RENDER & RETURN SVG PATH AND AXIS\n\n\n  render() {\n    const {\n      svgHeight,\n      svgWidth\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      viewBox: `0 0 ${svgWidth} ${svgHeight}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, this.makePath());\n  }\n\n} // DEFAULT PROPS\n\n\nLineChart.defaultProps = {\n  data: [],\n  color: '#FFFFFF',\n  svgHeight: 300,\n  svgWidth: 400\n};\nexport { LineChart };","map":{"version":3,"sources":["/Users/sejaldua/Desktop/Fall2020/misc/sejal-einblick-stock-challenge/client/src/Chart.js"],"names":["React","Component","LineChart","getMinX","data","props","time","getMaxX","length","getMinY","reduce","min","p","price","getMaxY","max","getSvgX","x","svgWidth","getSvgY","y","svgHeight","makePath","color","pathD","map","point","i","stroke","render","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport \"./LineChart.css\";\n\nclass LineChart extends Component {\n\n  // GET MAX & MIN X\n  getMinX() {\n    const {data} = this.props;\n    return data[0].time;\n  }\n  getMaxX() {\n    const {data} = this.props;\n    return data[data.length - 1].time;\n  }\n  // GET MAX & MIN Y\n  getMinY() {\n    const {data} = this.props;\n    return data.reduce((min, p) => p.price < min ? p.price : min, data[0].price);\n  }\n  getMaxY() {\n    const {data} = this.props;\n    return data.reduce((max, p) => p.price > max ? p.price : max, data[0].price);\n  }\n  // GET SVG COORDINATES\n  getSvgX(x) {\n    const {svgWidth} = this.props;\n    return (x / this.getMaxX() * svgWidth);\n  }\n  getSvgY(y) {\n    const {svgHeight} = this.props;\n    return svgHeight - (y / this.getMaxY() * svgHeight);\n  }\n  // BUILD SVG PATH\n  makePath() {\n    const {data} = this.props;\n    const color = \"#FFFFFF\";\n    let pathD = \"M \" + this.getSvgX(data[0].time) + \" \" + this.getSvgY(data[0].price) + \" \";\n\n    pathD += data.map((point, i) => {\n      return \"L \" + this.getSvgX(point.time) + \" \" + this.getSvgY(point.price) + \" \";\n    });\n\n    return (\n      <path className=\"linechart_path\" d={pathD} style={{stroke: color}} />\n    );\n  }\n  // // BUILD GRID AXIS\n  // makeAxis() {\n  // const minX = this.getMinX(), maxX = this.getMaxX();\n  // const minY = this.getMinY(), maxY = this.getMaxY();\n\n  // return (\n  //   <g className=\"linechart_axis\">\n  //     <line\n  //       x1={this.getSvgX(minX)} y1={this.getSvgY(minY)}\n  //       x2={this.getSvgX(maxX)} y2={this.getSvgY(minY)} />\n  //     <line\n  //       x1={this.getSvgX(minX)} y1={this.getSvgY(minY)}\n  //       x2={this.getSvgX(minX)} y2={this.getSvgY(maxY)} />\n  //   </g>\n  //   );\n  // }\n  // RENDER & RETURN SVG PATH AND AXIS\n  render() {\n    const {svgHeight, svgWidth} = this.props;\n    return (\n      <svg viewBox={`0 0 ${svgWidth} ${svgHeight}`}>\n        {this.makePath()}\n      </svg>\n    );\n  }\n}\n// DEFAULT PROPS\nLineChart.defaultProps = {\n  data: [],\n  color: '#FFFFFF',\n  svgHeight: 300,\n  svgWidth: 400\n}\n\nexport {\n  LineChart\n}"]},"metadata":{},"sourceType":"module"}