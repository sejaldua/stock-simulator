{"ast":null,"code":"!function (win) {\n  /**\n   * FastDom\n   *\n   * Eliminates layout thrashing\n   * by batching DOM read/write\n   * interactions.\n   *\n   * @author Wilson Page <wilsonpage@me.com>\n   * @author Kornel Lesinski <kornel.lesinski@ft.com>\n   */\n  'use strict';\n  /**\n   * Mini logger\n   *\n   * @return {Function}\n   */\n\n  var debug = 0 ? console.log.bind(console, '[fastdom]') : function () {};\n  /**\n   * Normalized rAF\n   *\n   * @type {Function}\n   */\n\n  var raf = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.msRequestAnimationFrame || function (cb) {\n    return setTimeout(cb, 16);\n  };\n  /**\n   * Initialize a `FastDom`.\n   *\n   * @constructor\n   */\n\n\n  function FastDom() {\n    var self = this;\n    self.reads = [];\n    self.writes = [];\n    self.raf = raf.bind(win); // test hook\n\n    debug('initialized', self);\n  }\n\n  FastDom.prototype = {\n    constructor: FastDom,\n\n    /**\n     * Adds a job to the read batch and\n     * schedules a new frame if need be.\n     *\n     * @param  {Function} fn\n     * @param  {Object} ctx the context to be bound to `fn` (optional).\n     * @public\n     */\n    measure: function (fn, ctx) {\n      debug('measure');\n      var task = !ctx ? fn : fn.bind(ctx);\n      this.reads.push(task);\n      scheduleFlush(this);\n      return task;\n    },\n\n    /**\n     * Adds a job to the\n     * write batch and schedules\n     * a new frame if need be.\n     *\n     * @param  {Function} fn\n     * @param  {Object} ctx the context to be bound to `fn` (optional).\n     * @public\n     */\n    mutate: function (fn, ctx) {\n      debug('mutate');\n      var task = !ctx ? fn : fn.bind(ctx);\n      this.writes.push(task);\n      scheduleFlush(this);\n      return task;\n    },\n\n    /**\n     * Clears a scheduled 'read' or 'write' task.\n     *\n     * @param {Object} task\n     * @return {Boolean} success\n     * @public\n     */\n    clear: function (task) {\n      debug('clear', task);\n      return remove(this.reads, task) || remove(this.writes, task);\n    },\n\n    /**\n     * Extend this FastDom with some\n     * custom functionality.\n     *\n     * Because fastdom must *always* be a\n     * singleton, we're actually extending\n     * the fastdom instance. This means tasks\n     * scheduled by an extension still enter\n     * fastdom's global task queue.\n     *\n     * The 'super' instance can be accessed\n     * from `this.fastdom`.\n     *\n     * @example\n     *\n     * var myFastdom = fastdom.extend({\n     *   initialize: function() {\n     *     // runs on creation\n     *   },\n     *\n     *   // override a method\n     *   measure: function(fn) {\n     *     // do extra stuff ...\n     *\n     *     // then call the original\n     *     return this.fastdom.measure(fn);\n     *   },\n     *\n     *   ...\n     * });\n     *\n     * @param  {Object} props  properties to mixin\n     * @return {FastDom}\n     */\n    extend: function (props) {\n      debug('extend', props);\n      if (typeof props != 'object') throw new Error('expected object');\n      var child = Object.create(this);\n      mixin(child, props);\n      child.fastdom = this; // run optional creation hook\n\n      if (child.initialize) child.initialize();\n      return child;\n    },\n    // override this with a function\n    // to prevent Errors in console\n    // when tasks throw\n    catch: null\n  };\n  /**\n   * Schedules a new read/write\n   * batch if one isn't pending.\n   *\n   * @private\n   */\n\n  function scheduleFlush(fastdom) {\n    if (!fastdom.scheduled) {\n      fastdom.scheduled = true;\n      fastdom.raf(flush.bind(null, fastdom));\n      debug('flush scheduled');\n    }\n  }\n  /**\n   * Runs queued `read` and `write` tasks.\n   *\n   * Errors are caught and thrown by default.\n   * If a `.catch` function has been defined\n   * it is called instead.\n   *\n   * @private\n   */\n\n\n  function flush(fastdom) {\n    debug('flush');\n    var writes = fastdom.writes;\n    var reads = fastdom.reads;\n    var error;\n\n    try {\n      debug('flushing reads', reads.length);\n      runTasks(reads);\n      debug('flushing writes', writes.length);\n      runTasks(writes);\n    } catch (e) {\n      error = e;\n    }\n\n    fastdom.scheduled = false; // If the batch errored we may still have tasks queued\n\n    if (reads.length || writes.length) scheduleFlush(fastdom);\n\n    if (error) {\n      debug('task errored', error.message);\n      if (fastdom.catch) fastdom.catch(error);else throw error;\n    }\n  }\n  /**\n   * We run this inside a try catch\n   * so that if any jobs error, we\n   * are able to recover and continue\n   * to flush the batch until it's empty.\n   *\n   * @private\n   */\n\n\n  function runTasks(tasks) {\n    debug('run tasks');\n    var task;\n\n    while (task = tasks.shift()) task();\n  }\n  /**\n   * Remove an item from an Array.\n   *\n   * @param  {Array} array\n   * @param  {*} item\n   * @return {Boolean}\n   */\n\n\n  function remove(array, item) {\n    var index = array.indexOf(item);\n    return !!~index && !!array.splice(index, 1);\n  }\n  /**\n   * Mixin own properties of source\n   * object into the target.\n   *\n   * @param  {Object} target\n   * @param  {Object} source\n   */\n\n\n  function mixin(target, source) {\n    for (var key in source) {\n      if (source.hasOwnProperty(key)) target[key] = source[key];\n    }\n  } // There should never be more than\n  // one instance of `FastDom` in an app\n\n\n  var exports = win.fastdom = win.fastdom || new FastDom(); // jshint ignore:line\n  // Expose to CJS & AMD\n\n  if (typeof define == 'function') define(function () {\n    return exports;\n  });else if (typeof module == 'object') module.exports = exports;\n}(typeof window !== 'undefined' ? window : this);","map":{"version":3,"sources":["/Users/sejaldua/Desktop/Fall2020/misc/stock-ticker-react/client/node_modules/fastdom/fastdom.js"],"names":["win","debug","console","log","bind","raf","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cb","setTimeout","FastDom","self","reads","writes","prototype","constructor","measure","fn","ctx","task","push","scheduleFlush","mutate","clear","remove","extend","props","Error","child","Object","create","mixin","fastdom","initialize","catch","scheduled","flush","error","length","runTasks","e","message","tasks","shift","array","item","index","indexOf","splice","target","source","key","hasOwnProperty","exports","define","module","window"],"mappings":"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","sourcesContent":["!(function(win) {\n\n/**\n * FastDom\n *\n * Eliminates layout thrashing\n * by batching DOM read/write\n * interactions.\n *\n * @author Wilson Page <wilsonpage@me.com>\n * @author Kornel Lesinski <kornel.lesinski@ft.com>\n */\n\n'use strict';\n\n/**\n * Mini logger\n *\n * @return {Function}\n */\nvar debug = 0 ? console.log.bind(console, '[fastdom]') : function() {};\n\n/**\n * Normalized rAF\n *\n * @type {Function}\n */\nvar raf = win.requestAnimationFrame\n  || win.webkitRequestAnimationFrame\n  || win.mozRequestAnimationFrame\n  || win.msRequestAnimationFrame\n  || function(cb) { return setTimeout(cb, 16); };\n\n/**\n * Initialize a `FastDom`.\n *\n * @constructor\n */\nfunction FastDom() {\n  var self = this;\n  self.reads = [];\n  self.writes = [];\n  self.raf = raf.bind(win); // test hook\n  debug('initialized', self);\n}\n\nFastDom.prototype = {\n  constructor: FastDom,\n\n  /**\n   * Adds a job to the read batch and\n   * schedules a new frame if need be.\n   *\n   * @param  {Function} fn\n   * @param  {Object} ctx the context to be bound to `fn` (optional).\n   * @public\n   */\n  measure: function(fn, ctx) {\n    debug('measure');\n    var task = !ctx ? fn : fn.bind(ctx);\n    this.reads.push(task);\n    scheduleFlush(this);\n    return task;\n  },\n\n  /**\n   * Adds a job to the\n   * write batch and schedules\n   * a new frame if need be.\n   *\n   * @param  {Function} fn\n   * @param  {Object} ctx the context to be bound to `fn` (optional).\n   * @public\n   */\n  mutate: function(fn, ctx) {\n    debug('mutate');\n    var task = !ctx ? fn : fn.bind(ctx);\n    this.writes.push(task);\n    scheduleFlush(this);\n    return task;\n  },\n\n  /**\n   * Clears a scheduled 'read' or 'write' task.\n   *\n   * @param {Object} task\n   * @return {Boolean} success\n   * @public\n   */\n  clear: function(task) {\n    debug('clear', task);\n    return remove(this.reads, task) || remove(this.writes, task);\n  },\n\n  /**\n   * Extend this FastDom with some\n   * custom functionality.\n   *\n   * Because fastdom must *always* be a\n   * singleton, we're actually extending\n   * the fastdom instance. This means tasks\n   * scheduled by an extension still enter\n   * fastdom's global task queue.\n   *\n   * The 'super' instance can be accessed\n   * from `this.fastdom`.\n   *\n   * @example\n   *\n   * var myFastdom = fastdom.extend({\n   *   initialize: function() {\n   *     // runs on creation\n   *   },\n   *\n   *   // override a method\n   *   measure: function(fn) {\n   *     // do extra stuff ...\n   *\n   *     // then call the original\n   *     return this.fastdom.measure(fn);\n   *   },\n   *\n   *   ...\n   * });\n   *\n   * @param  {Object} props  properties to mixin\n   * @return {FastDom}\n   */\n  extend: function(props) {\n    debug('extend', props);\n    if (typeof props != 'object') throw new Error('expected object');\n\n    var child = Object.create(this);\n    mixin(child, props);\n    child.fastdom = this;\n\n    // run optional creation hook\n    if (child.initialize) child.initialize();\n\n    return child;\n  },\n\n  // override this with a function\n  // to prevent Errors in console\n  // when tasks throw\n  catch: null\n};\n\n/**\n * Schedules a new read/write\n * batch if one isn't pending.\n *\n * @private\n */\nfunction scheduleFlush(fastdom) {\n  if (!fastdom.scheduled) {\n    fastdom.scheduled = true;\n    fastdom.raf(flush.bind(null, fastdom));\n    debug('flush scheduled');\n  }\n}\n\n/**\n * Runs queued `read` and `write` tasks.\n *\n * Errors are caught and thrown by default.\n * If a `.catch` function has been defined\n * it is called instead.\n *\n * @private\n */\nfunction flush(fastdom) {\n  debug('flush');\n\n  var writes = fastdom.writes;\n  var reads = fastdom.reads;\n  var error;\n\n  try {\n    debug('flushing reads', reads.length);\n    runTasks(reads);\n    debug('flushing writes', writes.length);\n    runTasks(writes);\n  } catch (e) { error = e; }\n\n  fastdom.scheduled = false;\n\n  // If the batch errored we may still have tasks queued\n  if (reads.length || writes.length) scheduleFlush(fastdom);\n\n  if (error) {\n    debug('task errored', error.message);\n    if (fastdom.catch) fastdom.catch(error);\n    else throw error;\n  }\n}\n\n/**\n * We run this inside a try catch\n * so that if any jobs error, we\n * are able to recover and continue\n * to flush the batch until it's empty.\n *\n * @private\n */\nfunction runTasks(tasks) {\n  debug('run tasks');\n  var task; while (task = tasks.shift()) task();\n}\n\n/**\n * Remove an item from an Array.\n *\n * @param  {Array} array\n * @param  {*} item\n * @return {Boolean}\n */\nfunction remove(array, item) {\n  var index = array.indexOf(item);\n  return !!~index && !!array.splice(index, 1);\n}\n\n/**\n * Mixin own properties of source\n * object into the target.\n *\n * @param  {Object} target\n * @param  {Object} source\n */\nfunction mixin(target, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) target[key] = source[key];\n  }\n}\n\n// There should never be more than\n// one instance of `FastDom` in an app\nvar exports = win.fastdom = (win.fastdom || new FastDom()); // jshint ignore:line\n\n// Expose to CJS & AMD\nif ((typeof define) == 'function') define(function() { return exports; });\nelse if ((typeof module) == 'object') module.exports = exports;\n\n})( typeof window !== 'undefined' ? window : this);\n"]},"metadata":{},"sourceType":"script"}