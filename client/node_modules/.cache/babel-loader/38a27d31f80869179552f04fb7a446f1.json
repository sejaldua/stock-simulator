{"ast":null,"code":"import * as d3 from 'd3';\nconst SERIES_TYPES = ['LINE', 'AREA'];\nconst TRANSITION_DURATION = 100;\nconst MAX_Y_TICKS = 6;\nexport default class D3TsChart {\n  constructor() {\n    this.elRef = null;\n    this.margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 30\n    };\n    this.responsiveHeight = false;\n    this.responsiveWidth = false;\n    this.xScale = d3.scaleTime();\n    this.yScale = d3.scaleLinear();\n    this.seriesDict = {// \"seriesname\": { type: SERIES_TYPES, ref: d3 object}\n    };\n\n    this.toggleSeries = id => {\n      if (id) {\n        const series = this.seriesDict[id];\n        const hidden = series.ref.classed('hidden');\n        series.ref.classed('hidden', !hidden);\n      }\n    };\n  }\n\n  /**\n   * @param Config {\n   *    elRef: container Element reference, \n   *    width,\n   *    height,\n   *    classList: { svg, group } //strings\n   *  }\n   */\n  init({\n    elRef,\n    width,\n    height,\n    classList\n  }) {\n    this.elRef = elRef; // If no width/height specified, SVG will inherit container element dimensions\n\n    if (width === undefined) this.responsiveWidth = true;\n    if (height === undefined) this.responsiveHeight = true;\n    this.outerWidth = width || this.elRef.offsetWidth;\n    this.outerHeight = height || this.elRef.offsetHeight;\n    this.classList = classList || {};\n    this.draw();\n  }\n\n  draw() {\n    // Main SVG\n    this.svg = d3.select(this.elRef).append('svg').attr('width', this.outerWidth).attr('height', this.outerHeight).classed(this.classList.svg || null, true); //Inner box group  (deducting margins)\n\n    this.group = this.svg.append('g').attr('width', this.outerWidth - this.margin.left - this.margin.right).attr('height', this.outerHeight - this.margin.top - this.margin.bottom).attr('transform', `translate(${this.margin.left} , ${this.margin.top})`).classed(this.classList.group || null, true); // X Axis init\n\n    this.xScale.range([0, this.outerWidth - this.margin.left - this.margin.right]);\n    this.xAxisRef = this.group.append('g').attr('transform', `translate(0,${this.outerHeight - this.margin.bottom})`).classed('x-axis', true); // Y Axis init\n\n    this.yScale.range([this.outerHeight - this.margin.bottom, 0]);\n    this.yAxisRef = this.group.append('g').attr('transform', 'translate(0, 0)').classed('y-axis', true);\n  }\n\n  addSeries({\n    name,\n    type,\n    fill,\n    stroke,\n    strokeWidth,\n    id\n  }) {\n    if (this.seriesDict[name]) throw new Error('Series name must be unique!');\n    if (!SERIES_TYPES.includes(type)) throw new Error('Series type not supported!');\n    this.seriesDict[name] = {\n      type,\n      ref: this.group.append('path').attr('fill', fill || 'none').attr('stroke', stroke || 'black').attr('stroke-width', strokeWidth || 2).classed('series', true).classed('hidden', false)\n    };\n  }\n\n  setSeriesData(name, data, adjustAxes = true) {\n    if (!window.focused) return;\n    const series = this.seriesDict[name];\n    this.adjustDimensions();\n    if (adjustAxes) this.adjustAxes(data);\n\n    switch (series.type) {\n      case 'AREA':\n        this.updateAreaSeries(series, data);\n        break;\n\n      case 'LINE':\n      default:\n        this.updateLineSeries(series, data);\n        break;\n    }\n  }\n\n  updateLineSeries(series, data) {\n    series.ref.datum(data).transition().duration(TRANSITION_DURATION).ease(d3.easeQuadIn).attr('d', d3.line().x(d => {\n      return this.xScale(d.timestamp);\n    }).y(d => {\n      return this.yScale(d.value);\n    }));\n  }\n\n  updateAreaSeries(series, data) {\n    series.ref.datum(data).transition().duration(TRANSITION_DURATION).ease(d3.easeQuadIn).attr('d', d3.area().x(d => {\n      return this.xScale(d.timestamp);\n    }).y0(this.yScale(0)).y1(d => {\n      return this.yScale(d.value);\n    }));\n  }\n\n  // Helper functions\n  adjustAxes(data) {\n    const maxValue = d3.max(data, d => d.value);\n    this.xScale.domain(d3.extent(data, d => d.timestamp));\n    this.xAxisRef.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear).call(d3.axisBottom(this.xScale));\n    this.yScale.domain([0, maxValue]);\n    this.yAxisRef.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear).call(d3.axisLeft(this.yScale).ticks(maxValue < MAX_Y_TICKS ? maxValue : MAX_Y_TICKS).tickFormat(d3.format('d')));\n  }\n  /**\n   * This function adapts axes and lines to width/height inherited from parent container element\n   * So basically if `responsiveHeight` & `responsiveWidth` are true, it fills the parent container\n   */\n\n\n  adjustDimensions() {\n    if (this.responsiveHeight) {\n      this.outerHeight = this.elRef.offsetHeight;\n      this.svg.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear).attr('height', this.outerHeight);\n      this.group.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear).attr('height', this.outerHeight - this.margin.top - this.margin.bottom);\n      this.yScale.range([this.outerHeight - this.margin.bottom, 0]);\n    }\n\n    if (this.responsiveWidth) {\n      this.outerWidth = this.elRef.offsetWidth;\n      this.svg.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear).attr('width', this.outerWidth);\n      this.group.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear).attr('width', this.outerWidth - this.margin.left - this.margin.right);\n      this.xScale.range([0, this.outerWidth - this.margin.left - this.margin.right]);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/sejaldua/Desktop/Fall2020/misc/stock-ticker-react/client/src/d3-ts-chart.js"],"names":["d3","SERIES_TYPES","TRANSITION_DURATION","MAX_Y_TICKS","D3TsChart","elRef","margin","top","right","bottom","left","responsiveHeight","responsiveWidth","xScale","scaleTime","yScale","scaleLinear","seriesDict","toggleSeries","id","series","hidden","ref","classed","init","width","height","classList","undefined","outerWidth","offsetWidth","outerHeight","offsetHeight","draw","svg","select","append","attr","group","range","xAxisRef","yAxisRef","addSeries","name","type","fill","stroke","strokeWidth","Error","includes","setSeriesData","data","adjustAxes","window","focused","adjustDimensions","updateAreaSeries","updateLineSeries","datum","transition","duration","ease","easeQuadIn","line","x","d","timestamp","y","value","area","y0","y1","maxValue","max","domain","extent","easeLinear","call","axisBottom","axisLeft","ticks","tickFormat","format"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nconst SERIES_TYPES = ['LINE', 'AREA'];\nconst TRANSITION_DURATION = 100;\nconst MAX_Y_TICKS = 6;\n\nexport default class D3TsChart {\n\n  // HTML Element References\n  elRef = null; // SVG Parent container element ref\n  svg; // Main SVG container with margins\n  group; // Inner box group without margins\n\n  // Layout config\n  margin = { top: 10, right: 30, bottom: 30, left: 30 };\n\n  outerWidth; outerHeight;\n\n  // responsive flags will be only true if you don't set width or height in config\n  responsiveHeight = false;\n  responsiveWidth = false;\n\n\n  // Axes\n  xScale = d3.scaleTime();\n  yScale = d3.scaleLinear();\n  xAxisRef;\n  yAxisRef;\n\n  // Series -- used to select and update series\n  seriesDict = {\n    // \"seriesname\": { type: SERIES_TYPES, ref: d3 object}\n  };\n\n  /**\n   * @param Config {\n   *    elRef: container Element reference, \n   *    width,\n   *    height,\n   *    classList: { svg, group } //strings\n   *  }\n   */\n  init({ elRef, width, height, classList }) {\n    this.elRef = elRef;\n\n    // If no width/height specified, SVG will inherit container element dimensions\n    if (width === undefined) this.responsiveWidth = true;\n    if (height === undefined) this.responsiveHeight = true;\n\n    this.outerWidth = width || this.elRef.offsetWidth;\n    this.outerHeight = height || this.elRef.offsetHeight;\n\n    this.classList = classList || {};\n\n    this.draw();\n  }\n\n  draw() {\n    // Main SVG\n    this.svg = d3.select(this.elRef)\n      .append('svg')\n      .attr('width', this.outerWidth)\n      .attr('height', this.outerHeight)\n      .classed(this.classList.svg || null, true);\n\n    //Inner box group  (deducting margins)\n    this.group = this.svg.append('g')\n      .attr('width', this.outerWidth - this.margin.left - this.margin.right)\n      .attr('height', this.outerHeight - this.margin.top - this.margin.bottom)\n      .attr('transform', `translate(${this.margin.left} , ${this.margin.top})`)\n      .classed(this.classList.group || null, true);\n\n    // X Axis init\n    this.xScale\n      .range([0, this.outerWidth - this.margin.left - this.margin.right]);\n    this.xAxisRef = this.group.append('g')\n      .attr('transform', `translate(0,${this.outerHeight - this.margin.bottom})`)\n      .classed('x-axis', true);\n\n    // Y Axis init\n    this.yScale\n      .range([this.outerHeight - this.margin.bottom, 0]);\n    this.yAxisRef = this.group.append('g')\n      .attr('transform', 'translate(0, 0)')\n      .classed('y-axis', true);\n  }\n\n  addSeries({ name, type, fill, stroke, strokeWidth, id }) {\n    if (this.seriesDict[name]) throw new Error('Series name must be unique!');\n    if (!SERIES_TYPES.includes(type)) throw new Error('Series type not supported!');\n\n    this.seriesDict[name] = {\n      type,\n      ref: this.group.append('path')\n        .attr('fill', fill || 'none')\n        .attr('stroke', stroke || 'black')\n        .attr('stroke-width', strokeWidth || 2)\n        .classed('series', true)\n        .classed('hidden', false)\n    };\n  }\n\n  setSeriesData(name, data, adjustAxes = true) {\n    if (!window.focused) return;\n    const series = this.seriesDict[name];\n\n    this.adjustDimensions();\n\n    if (adjustAxes) this.adjustAxes(data);\n\n    switch (series.type) {\n      case 'AREA':\n        this.updateAreaSeries(series, data);\n        break;\n      case 'LINE':\n      default:\n        this.updateLineSeries(series, data);\n        break;\n    }\n  }\n\n  updateLineSeries(series, data) {\n    series.ref\n      .datum(data)\n      .transition().duration(TRANSITION_DURATION).ease(d3.easeQuadIn)\n      .attr('d', d3.line()\n        .x((d) => { return this.xScale(d.timestamp); })\n        .y((d) => { return this.yScale(d.value); })\n      );\n  }\n\n  updateAreaSeries(series, data) {\n    series.ref\n      .datum(data)\n      .transition().duration(TRANSITION_DURATION).ease(d3.easeQuadIn)\n      .attr('d', d3.area()\n        .x((d) => { return this.xScale(d.timestamp); })\n        .y0(this.yScale(0))\n        .y1((d) => {\n          return this.yScale(d.value);\n        })\n      );\n  }\n\n  toggleSeries = (id) => {\n    if (id) {\n      const series = this.seriesDict[id];\n      const hidden = series.ref.classed('hidden');\n      series.ref.classed('hidden', !hidden);\n    }\n  }\n\n  // Helper functions\n  adjustAxes(data) {\n    const maxValue = d3.max(data, (d) => d.value);\n\n    this.xScale.domain(d3.extent(data, (d) => d.timestamp));\n    this.xAxisRef\n      .transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n      .call(d3.axisBottom(this.xScale));\n\n    this.yScale.domain([0, maxValue]);\n    this.yAxisRef\n      .transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n      .call(\n        d3.axisLeft(this.yScale)\n          .ticks(maxValue < MAX_Y_TICKS ? maxValue : MAX_Y_TICKS)\n          .tickFormat(d3.format('d'))\n      );\n  }\n\n  /**\n   * This function adapts axes and lines to width/height inherited from parent container element\n   * So basically if `responsiveHeight` & `responsiveWidth` are true, it fills the parent container\n   */\n  adjustDimensions() {\n    if (this.responsiveHeight) {\n      this.outerHeight = this.elRef.offsetHeight;\n      this.svg.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n        .attr('height', this.outerHeight);\n      this.group.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n        .attr('height', this.outerHeight - this.margin.top - this.margin.bottom);\n      this.yScale\n        .range([this.outerHeight - this.margin.bottom, 0]);\n    }\n\n    if (this.responsiveWidth) {\n      this.outerWidth = this.elRef.offsetWidth;\n      this.svg.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n        .attr('width', this.outerWidth);\n      this.group.transition().duration(TRANSITION_DURATION).ease(d3.easeLinear)\n        .attr('width', this.outerWidth - this.margin.left - this.margin.right);\n      this.xScale\n        .range([0, this.outerWidth - this.margin.left - this.margin.right]);\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}